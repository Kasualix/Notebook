I've noticed a point about List#contains (checking if a list contains a specific element). Many mod authors open up blacklists or whitelists in config files to achieve higher configurability. However, if the list contains too many elements (whether they are default configurations or user-added ones), iterating through List#contains calls can become quite expensive, affecting the game's performance in specific situations (such as Embeddium Extras, which significantly improved frame rates after addressing this performance issue). The solution I've come up with is to transform it into checking the properties of the List#contains target, perform the check only once, and directly call the cached boolean value obtained from this initial check. This avoids repeatedly traversing the array. The initial check's location and method might vary depending on the properties of the check target. For example, if the check target is EntityType, you could create an ExtendedEntityType interface, implement it using a mixin with EntityType, and include a boolean value for "is included in the configuration file" within the mixin. Then, in certain places (such as FMLCommonSetupEvent), you can directly use the configuration file's array to check all EntityType instances using ForgeRegistries and mark whether they are included in the array. In practical applications, instead of using List#contains, you can use ((ExtendedEntityType)entityType).isInConfig() (check speed goes brrrrrrrrrr).
